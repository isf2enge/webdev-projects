*Observação,pratique com as atividades deste arquivo,assim você aprenderá.

////////////////Curso de html.//////////////////////////////////////////////////////////////////////
1-Como primeira etapa do aprendizado vai-se primeiro usar as extensões de utilização:
	
	*Primeiro vai usar o vscode
	*Segundo vai baixar a extensão do vscode chamada de : https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server
	* A terceira: https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server
	* a quarta: https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server

2-Com o ambiente preparado agora,usa-se os principios de criação iniciais:
	
	Abra o vscode, e coloque as tags <h1>Texto aqui</h1>:
		
		- esse simbolo '<>',se chama tag.E entre eles é o elemento.
		-Outra coisa a se saber é que o 'h1' vai até o 'h6'.
		-Outra coisa é que são para titulos,tenha isso em mente.
		-Outra coisa é que o h1 só se usa uma vez, os que vem depois são h2 e sucessivamente. Isso é um bom costume de programação.
3-Depois usa os parágrafos em html:
	para estruturas de texto ou listas,usa-se a tag parágrafo: <p>Texto aqui</p>:
	
		-Esse tipo de estrutura,serve para organizar seu texto em parágrafos
		-Mais uma coisa, como boa prática de programação,você gera textos aleatórios,para ver como fica a estrutura do seu site,que é o lipsum text.

4-Parametros nulos e não nulos:
	
	-Uma coisa importante de mencionar,que quando tem-se tags que possuem duas tags,são não nulas.Quando tem-se tags,que é so uma,é nula.
	-Uma estrutura geral de uma tag nula é: <tag + espaco+/>,isso é geral
	-Existem dois tipos de tags <hr /> (horizontal reference),é basicamente uma linha que dividi dois parágrafos com estruturas literarias diferentes.
	-E por ultimo a <br /> (break reference), elá quebra a linha para a próxima,esse tipo de estrutura é usada em parágrados únicos.
	-Esse tipo de estrutura não pode ser usados para separar parágrafos, pois quem separa parágrafos são <p></p>.So pode ser usado em parágrafos unicos.


5-Criação de listas:

	
	-Ainda no processo tem-se as listas,sendo dois tipos as ordenadas(ol) e desordenadas(ul)
	
	-As listas ordenadas,tem a seguinte configuração e desordenadas também:

		<ul ou ol>
			<li>Elemento aqui</li> #Isso aqui é o list item.
			#Outra coisa importante de dizer, é que o list item fique sempre nessa forma: <li></li>,e com sua respectiva indentação.

		</ul ou /ol>

	-Outra coisa a se mencionar são listas dentro de listas:(respeitando sempre a indentação)
		
		<ul>
			<li>Aqui vem o elemento. Primeiro esse elemento ai em baixo aparece o 'ol'
			    <ol start = 5 #Indica que a sequencia comece apartir do numero '5'>
				<li>Elemento aqui</li> #Seguindo essa ideia de estrutura.
			    </ol>
			</li>
		</ul>

	-Importante mencionar que o ul (so aparecem pontos em seus tópicos)
	-o 'ol' só aparecem numeros

6-Elementos ancora:
		
	-São estruturas basicamente dadas por:
		<a+ espaco+tag+=+valor_da_tag>Texto aqui</a>

	-Nesse processo,tem-se as estruturas href, que servem exatamente para direcionar para outras páginas no meu ambiente de trabalho.
	-É importante que você crie as pastas dentro do ambiente de trabalho,desde pastas de imagens entre outros:
		<a href="https://site-aqui-paraverelefuncionando.">Texto aqui</a> #É importante ter o https se quiser redirecionar a outros sites se não não pega.

7-Gerar imagens:
	
	-<img src='picsum' alt='Descricao da imagem importante ter isso para cegos' height = "tamanho da imagem,geralmente sao 200 pixels "/>  #No quesito de imagens,é interessante você gerar suas próprias imagens no picsum.


8-Caminhos:
	
	-Existem dois tipos de caminhos, o relativo e o absoluto:
			
		-Para o relativo faz-se './' ou '../', o caminho relativo é melhor que tem para o desenvolvimento,por ser o menor.
		-Caminho absoluto: C://caminho-maior.


9-Estrutura geral do html:

<DOCTYPE html>
<html lang = 'en (corresponde a leitura em ingles para os cegos)'>
	<head> (o head trata-se de aspectos funcionais do site, questões de processamento e tal)

		<meta charset="UTF-8">
		<title>Titulo da pagina que aparece no canto superior esquerdo</title>
	
	</head>

	<body> (/Aqui é onde se da a criação própriamente do site.Tudo o que o cliente verá)
		<h1>Hello world</h1>
	</body>
</html>

10-Compound projects:
	Utilizados para realizar o projeto do cliente,do jeito que ele desejar.



//////////////////////////Curso-de-CSS

11-O css ele dá enfeite ao html

12-Existem três estilos de CSS:

	inline:(dentro da tag) (indicado apenas para 1 elemento )
		ex: <tag style="background: blue"></tag>

	internal:(dentro do head) (indicado apenas quando trabalhar com uma pagina)
		.	
		.
		.
		<head>
			<style>
				h1{
					background:color;
				}
	
		</style>


		</head>

	external: (cria um arquivo chamado style.css) (indicado apenas quando trabalhar com varias paginas,ou uma também é o mais usado.)
		#no html
		<head>
			<link href='./style.css' rel = 'stylesheet'> #Isso vai importar os arquivos do css
		</head>
		#no css
		
		h1{} #Json


13-Tipos de Css específico do style.css:
	
	#No style.csss
		
		li{}
		.nome-da-class{} #Usado em varios elementos
		p[nome-da-variavel = 'algum-valor' #normalmente o nome é draggable.]{} #Usado em varios elementos
		#main{} #estrutura identidade,ela só altera um elemento e não pode ser usado em mais de um elemento

	#no body do html fica:
		
		<body>
			<h1 class =  'nome-da-class nome-da-class2 #casoqueiraqueoarquivotenhamaisdeumaclassusaumespaço'></h1>
			<p nome-da-variavel = 'algum-valor'></p>
			<img src='' alt='' id = 'main-ou-outro-nome'> 

	#Para os nomes das classes gerais colocadas,você coloca essas coisas no body do html.
		</body>


14-Parametros hexadecimais:
	utilizados como rgba ou #15552221,indicando as cores para o css.

15-Quando trabalha-se com textos tem-se os padrões de fontes básicos:

		#no style.css
			
			p{
				font-family: times new romas,sans serif
				font-size: rem (altura em relação ao tamanho padrão do body ou html da fonte que eh 16 pixels)

				text-align:center,left, etc.

				font-weigth: ( de 100 a 900 ele trata do comprimento lateral)


16-Para investigar uma pagina de css:
		clica com o botao direito e em especionar depois na parte do style.css,e se quiser ter uma overview,
		clica nos tres pontos em overviewcss,ai lá voce tera um resumo das cores utilizadas e tal.
		-OBSERVAR TAMBEM SOBRE O PESTICIDE DO GOOGLE CHROME,PARA USALO CLICA NO BLOCO LÁ E SHIFT AI VOCE TERA O COMANDO ESPECIFICO USADO.

					


			}


17-As tags de um html,são em caixas,tendo como principais propriedades:

		#No style.css
			div{
				border: 10px solid black;
				padding: 10px;
				border-width: 10px 10px 10px 10px;
				margin: 10px;
				height:10px;
				width:10px; 
  

			}

		#O border é a borda da imagem, o padding é a distancia da borda interna até o centro da imagem, margin é apos a borda,
		#height altura da imagem,e width é largura do mesmo.

	
		#quando se fala em caixas,se fala em div,e uma curiosidade se quiser ter uma relação de imagem e texto,usa-se o div dentro junto com o img e o p.


18-No css,tem-se a ordem de preferencia,sendo:


	#no style.css
		
		li{  color1
		     color2
		     color3
			#Ele pega o color 3,ordem de baixo.}

		li{
			color4 #ele vai pegar aqui


		}

		
	#No html:
		inline
		internal
		external  #em criterio de escolha para o css ele vai pegar o inline como principal, ou o internal tb depende-la.

	#No css:
		li
		.class
		p[dragabble]
		#id    #ele pega o id,por ordem de preferencia na seleçao dos elementos lá no html.



19-Se tiver muitas tags, com mais de 2000 linhas,usa-se os seletores para pegar as informaçoes:


	#no style.css
		-estrutura pai filho:
			div> p{json}
		-estrutura descendente:
			div img #ele pula gerações mais rapido, acessa a tag e já pula pra o topico desejado
			div .class
		-estrutura encadeada
			tag-desejada.class#id{json} #Ele bota a tag desejada como li por exemplo e localiza o mesmo em funcao dos topicos requeridos lá,agora tomar cuidado quando no caminho nao botar uma tag que seja em comum na multidao ai da errado

		-estrutura descendente encadeada
			tag-de-entrada tag-do-caminho.outra-se-for-uma-class-por-exemplo #Aqui voce tem a tag de entrada e associado a isso uma tag em forma de encadeamento apontando as localizacoes desejadas.


20-Posicoes relativas de um css:

		#No style.css
			div{
				position: static #Posicao padrao
				position: relative # baseado no static
				positon: absolute #Baseada no relative e se nao tiver no canto superior esquedo da pagina

				position: fixed (toma como referencia o canto superior esquerdo da pagina,e tambem ela acompanha conforme voce desce a imagem a absolute nao acompanha e nem a relative.por que eh em relacao a pagina da web e nao html).


21: z-index, se for maior que zero o bloco fica na frente dos outros se for menor que 0 fica atras.

22-Outro parametro é a estrutura de alinhamento dos blocos:
	
	#no css:

		div{

			display:inline #Ele fica todo em uma linha com outros blocos,mas não é dimensionavel
			display:block #Ele fica so em uma linha,sendo portanto um paragrafo é dimensionavel
			display: inline-block #Ele fica em uma linha com outros alinhados e é dimensionavel
				

		}

			}


23-Float é utilizado para circundar textos em torno de imagens:

	#no css

		div{
			float: right ou left;


		}

		footh{

			clear: right ou left ou both #caso tenha os dois ai usa o both.
			} #um indicador de referencia,caso ele esteja dentro do bloco com texto lá usa-se o clear


24-Para o ajuste de tela tem-se a media query, tal que você adapta o texto em padrões para pc,tablete e por ai vai:

		#no css

			@media (min-width:60px ) and (max-width:200px){


				#COloca as tags de background e coisas em geral aqui.


} #indica que é minimo é apartir de 60 px e o maximo eh ateh 200px	





		#Para verificar os tipos de tela de uma media query vai no google chrome,mais ferramentas,e depois em telas.Ai voce ver em tempo real as modificacoes feitas.


		#padroes de tela:
			/**
				TODO: Change the background color for each device
				[lightsalmon] Mobile Devices: 319px — 480px
				[powderblue] iPads and Tablets: 481px — 1200px
				[limegreen] Laptops: 1201px — 1600px
				[seagreen] Desktops: 1601px and more
			**/
		




//Curso-de-flex-box--------------------------------------------------------------------------------------------


1-O Flex-box,é um tipo de display, e possui as mesmas designações de determinação do display.

2-Outra coisa a se afirmar, é que quando trabalhar com o flexbox, precisa-se por todas as informações dentro de um conteiner.

3-Estrutura geral do flex-box:

	.conteiner{

		display:flex ou inline-flex; #Por padrão as estruturas ficaram na forma 'row=linha'. Saiba que o inline-flex, ele é utilizado do mesmo jeito que o flex, mas a largura dos blocos, ficam na largura dos elementos dentro do conteiner.
		gap:10px #Gap é utilizado para dar espaço entre os blocos no flexbox
 	
	}


4-Após declarado o flex, tem-se alguns padrões de estruturas a serem abordados:

	no css:
		
		.conteiner{
			display:flex;
			gap:10px
			flex-direction: column ou row #Esse padrão de estrutura faz com que o conteiner se posicione em linha ou em coluna.
			

		}

		.conteiner> .item{

			flex-basis:20px; #Aqui se o box estiver na horizontal,o box aumenta em largura,se estiver na vertical o box aumenta em altura.O flex-basis,só é
			#utilizado em itens.

		
		}


5-No padrão de flex-box, tem-se modelos de layout que modificam os **elementos do conteiner e  são dados por:
		
		-justify-content: Aqui basicamente, tem-se após **a declaração do display flex, dentro do conteiner, 
		O deslocamento dos elementos, declarando a posição na horizontal

		-align-items: essa estrutura ela, modifica os elementos na vertical e com os mesmos fundamentos da justify-content

		-flex-wrap: aqui, determina-se a estrutura como wrep,tal que quando o conteiner fecha de mais sua largura,conforme fecha-se a tela do pc,
		ela automaticamente passa o elemento para o outro lado do conteiner, aumentando-se assim o conteiner.

		-align-content: ela trabalha de forma semelhante ao align-content, mas so funciona quando o flex-wrap está ativado.

		-outra coisa, para trabalhar-se todas essas propriedades, é cruscial que o height do conteiner esteja em 100hcv.Ou voce olha o conteiner e ver se não está pequeno lá na hora.
		
		-qualquer duvidas acesse os conteudos de layout do flex na net.
			.conteiner{
				display:flex;
				height:100vh; #altura utilizada para deixar o conteiner assertivo as propriedades do layout
				flex-direction: column ou rom;
				justify-content: center #Ele centraliza na vertical por estar o column ou na horizontal se tiver o row
				flex-wrap: wrap; #adaptar ao movimento do conteiner e fazer o elemento ir para outra linha do conteiner
				align-items: center #meche na vertical ou na horizontal se estiver com o flex-direction como column
				align-content: center #Do mesmo jeito do align-items mas tem que ta ativo o flex-wrap.
				


			}



6-No outro padrão tem-se o criterio de comprimento dos blocos, e portanto trabalha-se com os elementos de dentro do conteiner:
		
		width: esse ja sabe o que é, alterando-se dentro dos itens
		flex-basis: esse determina o comprimento do elemento
		max-width: esse determina um comprimento máximo em relaçao ao flex-basis.
		min-width: esse determina um comprimento mínimo maior que ele. Tomando como base o flex-basis
		flex-grow: esse determina que em relação ao comprimento padrão flex-basis, esse aumenta além do comprimento padrão.
		flex-shrink: esse determina que em relação ao comprimento padrão flex-basis, esse diminui de comprimento.
		flex: 1 1 20px, resumo com flex-grow;flex-shrink;width. Essa estrutura ela é a mais usada, portanto tem que saber.
		flex: 1, resumo dessa de cima botando um valor pra tudo.
		
		*quando tem-se um flex-grow e flex-basis como 1, ele torna automaticamente o flex-basis como desconsideravel aumentando ou diminuido portanto.


		.conteiner> item1{
			
			flex-basis: 20px  #Primeiro determina-se o flex basis, depois o resto
			height:100vh	
			max-width: 10px  #Como o flex basis é maior, o bloco ficará com 10 px, se fosse maior ficaria no padrão dos 20px
			min-width: 5px  #Como é menos ele manter o padrão de altura do flex-basis.
			flex-grow: esse determina que em relação ao comprimento padrão flex-basis, esse aumenta além do comprimento padrão.
			flex-shrink: esse determina que em relação ao comprimento padrão flex-basis, esse diminui de comprimento.
			flex: 1 1 20px, resumo com flex-grow;flex-shrink;width. Essa estrutura ela é a mais usada, portanto tem que saber.
			flex: 1, resumo dessa de cima botando um valor pra tudo.
			

		}



 



